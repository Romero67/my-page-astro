---
import ThemeIcon from '../ThemeIcon.astro'
import LangIcon from '../LangIcon.astro'
import localExitSvg from "../../images/exit.svg?raw";
import esLang from "../../lang/es.json";
import enLang from "../../lang/en.json";
---

<div class="menu-lateral">
    <div class="menu-lateral-background" id="background-close"></div>
    <div class="menu-lateral-container">
        <div class="menu-lateral-exit" id="close-menu-btn">
            <Fragment set:html={localExitSvg} />
        </div>
  
        <ul class="nav-bar">
            <li class="menu-lateral-item">
              <a href="#tab1" lang="es">{esLang.items_nav.initation}</a>
              <a href="#tab1" lang="en">{enLang.items_nav.initation}</a>
            </li>
            <li class="menu-lateral-item">
              <a href="#tab2" lang="es">{esLang.items_nav.about}</a>
              <a href="#tab2" lang="en">{enLang.items_nav.about}</a>
            </li>
            <li class="menu-lateral-item">
              <a href="#tab3" lang="es">{esLang.items_nav.contact}</a>
              <a href="#tab3" lang="en">{enLang.items_nav.contact}</a>
            </li>
            <li>
              <ThemeIcon 
              labelBtn={esLang.items_nav.label_btn_theme}
              lang="es"/>
              <ThemeIcon
                labelBtn={enLang.items_nav.label_btn_theme}
                lang="en"/>
            </li>
            
            <li>
              <LangIcon />
            </li>
        </ul>
    </div>
</div>

<header class="header-mobile">
    <div class="header-menu">
     <svg id="open-menu-btn" enable-background="new 0 0 32 32" version="1.1" viewBox="0 0 32 32" xml:space="preserve" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><path d="M26,16c0,1.104-0.896,2-2,2H8c-1.104,0-2-0.896-2-2s0.896-2,2-2h16C25.104,14,26,14.896,26,16z" id="XMLID_314_"/><path d="M26,8c0,1.104-0.896,2-2,2H8c-1.104,0-2-0.896-2-2s0.896-2,2-2h16C25.104,6,26,6.896,26,8z" /><path d="M26,24c0,1.104-0.896,2-2,2H8c-1.104,0-2-0.896-2-2s0.896-2,2-2h16C25.104,22,26,22.896,26,24z" /></svg>
    </div>
</header>

<header class="header desktop">
    <div class="nav">
     <a class="header-logo-desktop" href="#">
      MR
     </a>
     <ul class="nav-bar">
      <li class="nav-item">
        <a href="#tab1" lang="es">{esLang.items_nav.initation}</a>
        <a href="#tab1" lang="en">{enLang.items_nav.initation}</a>
      </li>
      <li class="nav-item">
        <a href="#tab2" lang="es">{esLang.items_nav.about}</a>
        <a href="#tab2" lang="en">{enLang.items_nav.about}</a>
      </li>
      <li class="nav-item">
        <a href="#tab3" lang="es">{esLang.items_nav.contact}</a>
        <a href="#tab3" lang="en">{enLang.items_nav.contact}</a>
      </li>
      <li>
        <ThemeIcon 
          labelBtn={esLang.items_nav.label_btn_theme}
          lang="es"/>
        <ThemeIcon
          labelBtn={enLang.items_nav.label_btn_theme}
          lang="en"/>
      </li>
      <LangIcon />
     </ul>
    </div>  
</header>



<script is:inline type="module">

    const changeTheme = (theme) =>{
        if (theme === 'light') {
            document.body.classList.remove('theme--dark');
            document.querySelectorAll('.sun').forEach(el => el.style.display = 'none')
            document.querySelectorAll('.moon').forEach(el => el.style.display = 'inherit')
        } else {
            document.body.classList.add('theme--dark');
            document.querySelectorAll('.moon').forEach(el => el.style.display = 'none')
            document.querySelectorAll('.sun').forEach(el => el.style.display = 'inherit')
        }
    }

    const theme = (() => {
      if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
        return localStorage.getItem('theme');
      }
      if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
        return 'theme--dark';
      }
      return 'light';
    })();
  
    changeTheme(theme)
  
    localStorage.setItem('theme', theme);
  
    const handleToggleClick = () => {
      const body = document.body;
      body.classList.toggle('theme--dark', !body.classList.contains('theme--dark'));
  
      const isDark = body.classList.contains('theme--dark');
      const theme = isDark ? 'theme--dark' : 'light'
      localStorage.setItem('theme', theme);

      changeTheme(theme)
  
      document.querySelector('.menu-lateral').style.left = '-100%'
      document.body.style.overflow = 'auto'
    }
  
    const btnsTheme = document.querySelectorAll('.themeToggle');
  
    // Agrega un evento de clic a cada elemento
    btnsTheme.forEach(function(elemento) {
        elemento.addEventListener('click', handleToggleClick);
    });
</script>

<script is:inline type="module">

    const hideHtml = (langToDelete) =>{
      if(!langToDelete){
        userLanguage = navigator.language || navigator.userLanguage;
        langToDelete =  (userLanguage && userLanguage.startsWith('en')) ? 'es' : 'en'
      }
      
      const elementsWithLang = document.querySelectorAll("[lang]");
      elementsWithLang.forEach((element) => {
              if (element.tagName.toLowerCase() === 'html') return

              if (element.getAttribute("lang") === langToDelete) {
                  element.style.display = 'none';
              }
              if (element.getAttribute("lang") !== langToDelete) {
                  element.style.display = 'inherit';
              }
          });
  
      localStorage.setItem('mr_lang', langToDelete)
      toggleLangBtns(langToDelete)

      
    }
  
    const toggleLangBtns = (lang) =>{
      if(lang == 'es'){
        document.querySelectorAll('.text-en').forEach(el => el.style.display = 'none')
        document.querySelectorAll('.text-es').forEach(el => el.style.display = 'inherit')
        document.documentElement.lang = "en"
      }else{
        document.querySelectorAll('.text-es').forEach(el => el.style.display = 'none')
        document.querySelectorAll('.text-en').forEach(el => el.style.display = 'inherit')
        document.documentElement.lang = "es"
      }
    }
  
    const getLang = () =>{
      if (typeof localStorage !== 'undefined' && localStorage.getItem('mr_lang')) {
        return localStorage.getItem('mr_lang');
      }
      return false;
    }
  
    const handleToggleLangClick = () => {
      const lang = getLang() == 'es' ? 'en' : 'es'
      hideHtml(lang)
      document.querySelector('.menu-lateral').style.left = '-100%'
      document.body.style.overflow = 'auto'
    }
  
    hideHtml(getLang())
    const btnsLang = document.querySelectorAll('.langToggle');

    btnsLang.forEach(function(elemento) {
        elemento.addEventListener('click', handleToggleLangClick);
    });
  </script>

  <script is:inline>
    function initMenuLateral() {
      function addEventListeners(selector, event, callback) {
        var elements = document.querySelectorAll(selector);
        for (var i = 0; i < elements.length; i++) {
          elements[i].addEventListener(event, callback);
        }
      }

      function openMenu() {
        document.querySelector('.menu-lateral').style.left = '0px';
        document.body.style.overflow = 'hidden';
      }

      function closeMenu() {
        document.querySelector('.menu-lateral').style.left = '-100%';
        document.body.style.overflow = 'auto';
      }

      addEventListeners('#open-menu-btn', 'click', openMenu);
      addEventListeners('#close-menu-btn', 'click', closeMenu);
      addEventListeners('#background-close', 'click', closeMenu);

      var menuItems = document.querySelectorAll('.menu-lateral .menu-lateral-item');
      for (var i = 0; i < menuItems.length; i++) {
        menuItems[i].addEventListener('click', closeMenu);
      }
    }

    initMenuLateral()

    function initShowHideHeader() {
      function handleScroll() {
        if (window.scrollY > 0) {
          document.querySelector('.header').classList.add('scrolled');
          document.querySelector('.header-mobile').classList.add('scrolled');
        } else {
          document.querySelector('.header').classList.remove('scrolled');
          document.querySelector('.header-mobile').classList.remove('scrolled');
        }
      }

      window.addEventListener('scroll', handleScroll);
    }

    // Llama a la funci√≥n para inicializar el evento de scroll
    initShowHideHeader();

  </script>